import{_ as t,b as d,o as a,Q as r}from"./chunks/framework.CUk_15SL.js";const k=JSON.parse('{"title":"Vue2 生命周期","description":"Vue2 生命周期","frontmatter":{"id":24091011454890,"date":"2024/09/21 23:49","title":"Vue2 生命周期","description":"Vue2 生命周期","tag":"Vue 前端","archive":null,"recommendations":null,"shadow":false},"headers":[],"relativePath":"Vue2LifeCycle.md","filePath":"Vue2LifeCycle.md"}'),i={name:"Vue2LifeCycle.md"};function s(o,e,c,n,l,h){return a(),d("div",null,e[0]||(e[0]=[r(`<h1 id="vue2-生命周期" tabindex="-1">vue2 生命周期 <a class="header-anchor" href="#vue2-生命周期" aria-label="Permalink to &quot;vue2 生命周期&quot;">​</a></h1><h2 id="生命周期一览" tabindex="-1">生命周期一览 <a class="header-anchor" href="#生命周期一览" aria-label="Permalink to &quot;生命周期一览&quot;">​</a></h2><p><a href="https://v2.cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noreferrer">VUE2 官网生命周期参考</a></p><table tabindex="0"><thead><tr><th>生命周期</th><th>时机</th><th>注意</th></tr></thead><tbody><tr><td>beforeCreate</td><td>组件实例被创建之初</td><td>还不可以访问 <code>this</code></td></tr><tr><td>created</td><td>组件实例已经完全创建</td><td>可以访问到 <code>this</code> 和数据等</td></tr><tr><td>beforeMount</td><td>组件挂载之前</td><td>相关的 <code>render</code> 函数首次被调用</td></tr><tr><td>mounted</td><td>组件挂载到实例上去之后</td><td>可以通过 <code>$el</code>、<code>$refs</code> 等访问元素。不会保证所有的子组件也都被挂载完成</td></tr><tr><td>beforeUpdate</td><td>组件数据发生变化</td><td>dom 还没有更新</td></tr><tr><td>updated</td><td>组件数据更新之后</td><td>dom 已经更新了</td></tr><tr><td>beforeDestroy</td><td>组件实例销毁之前</td><td>在这一步，实例仍然完全可用</td></tr><tr><td>destroyed</td><td>组件实例销毁之后</td><td>所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</td></tr><tr><td>activated</td><td><code>keep-alive</code> 缓存的组件激活时</td><td></td></tr><tr><td>deactivated</td><td><code>keep-alive</code> 缓存的组件停用时</td><td></td></tr><tr><td>errorCaptured</td><td>捕获一个来自子孙组件的错误时</td><td></td></tr></tbody></table><p><strong>生命周期图示：</strong></p><p>![alt text](assets/VueInterviewQuestion1/image.png =500x)</p><h2 id="activated-和-deactivated-钩子" tabindex="-1">activated 和 deactivated 钩子 <a class="header-anchor" href="#activated-和-deactivated-钩子" aria-label="Permalink to &quot;activated 和 deactivated 钩子&quot;">​</a></h2><p>在被 <code>keep-alive</code> 包含的组件/路由中，会多出 <code>activated</code> 与 <code>deactivated</code> 钩子。</p><p><strong>首次进入组件时</strong>：<code>beforeRouteEnter</code> → <code>beforeCreate</code> → <code>created</code> → <code>mounted</code> → <code>activated</code> → <code>...</code> → <code>beforeRouteLeave</code> → <code>deactivated</code></p><p><strong>再次进入组件时</strong>：<code>beforeRouteEnter</code> → <code>activated</code> → <code>...</code> → <code>beforeRouteLeave</code> → <code>deactivated</code></p><p>由于组件被缓存，退出时没有真正的销毁，所以不会调用销毁相关的钩子，作为代替调用 <code>deactivated</code>。再次进入组件时不必再创建挂载，作为代替调用 <code>activated</code>。</p><h2 id="errorcaptured-钩子" tabindex="-1">errorCaptured 钩子 <a class="header-anchor" href="#errorcaptured-钩子" aria-label="Permalink to &quot;errorCaptured 钩子&quot;">​</a></h2><p><code>errorCaptured</code> 用于捕获子/后代组件的错误并向用户创建警报。发生错误的默认行为是从发生错误的组件传播或“向上冒泡”，最终在控制台中显示为错误消息。<code>errorCaptured</code> 钩子返回 <code>false</code> 可以结束这种传播（控制台中不会显示错误消息）</p><p>另外可以声明 <code>app.config.errorHandler</code> 函数用户处理全局的错误信息，函数无论返回什么控制台中都不会显示错误消息，可以使用 <code>captureError</code> 函数在控制台中显示错误信息。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;进来啦~&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 错误上报到收集报错的平台</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  captureError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="数据请求在-created-和-mouted-的区别" tabindex="-1">数据请求在 created 和 mouted 的区别 <a class="header-anchor" href="#数据请求在-created-和-mouted-的区别" aria-label="Permalink to &quot;数据请求在 created 和 mouted 的区别&quot;">​</a></h2><p><strong>created</strong> 在组件实例一旦创建完成的时候立刻调用，这时候页面 dom 节点并未生成。<br><strong>mounted</strong> 在页面 dom 节点渲染完毕之后就立刻执行。</p><p><code>created</code> 比 <code>mounted</code> 在触发时机上要更早的。两者都能拿到实例对象的属性和方法，但放在 <code>mounted</code> 中的请求有可能导致页面闪动（因为此时页面 dom 结构已经生成）。如果在页面加载前完成请求，则不会出现此情况。所以建议对页面内容的改动放在 <code>created</code> 生命周期当中。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://v2.cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noreferrer">Vue 生命周期</a></p>`,20)]))}const E=t(i,[["render",s]]);export{k as __pageData,E as default};
